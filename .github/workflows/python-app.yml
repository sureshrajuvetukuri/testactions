name: Python CI

# Controls when the action will run
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out the repository code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up Python
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    # Step 3: Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest requests

    # Step 4: Run tests
    - name: Run tests
      run: pytest

    # Step 5: Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 6: Build Docker image
    - name: Build Docker image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/mlops-demo:latest .

    # Step 7: Push Docker image
    - name: Push Docker image
      run: docker push ${{ secrets.DOCKER_USERNAME }}/mlops-demo:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out the repository code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up kubectl
    - name: Set up kubectl
      uses: azure/setup-kubectl@v1
      with:
        version: 'latest'

    # Step 3: Create .kube Directory and Decode Kubeconfig
    - name: Create .kube Directory and Decode Kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > $HOME/.kube/config

    # Step 4: Check Kubernetes API Server Connectivity with Retries
    - name: Check Kubernetes API Server Connectivity
      run: |
        for i in {1..5}; do
          kubectl version --request-timeout=32s && break || sleep 15
        done

    # Step 5: Deploy to Kubernetes
    - name: Deploy to Kubernetes
      run: kubectl apply -f k8s-deployment.yaml --validate=false
